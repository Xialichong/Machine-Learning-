更好的： 频繁项集生成技术
Library(dplyr)  #manipulating data frames
Library(gridExtra)  # output clean formatted tables

#utility function: appends vectors to a list
List.append<- function(mylist, …){
mylist<- c(mylist, list())
Return(mylist)
}


#接下来，定义一个获取数据并将其转化成数据框要求格式的函数
##step1： function to read the dataset into memory from file
get_transaction_dataset<- function(filename){
df<- read.csv(filename, header=FALSE)
dataset<- list()
for (index in seq(nrow(df))){
transaction.set<- as.vector(unlist(df[index,]))
transaction.set<- transaction.set[transaction.set != ""]
dataset<- list.append(dataset.transaction.set)
}
return(dataset)}

#Step2: Function to convert dataset into a data frame
get_item_freq_table<- function(dataset){
item.freq.table<-unlist(dataset) %>% table %>%> data.frame
return(item.freq.table)
}

#Step 3: Function to prune items based on minimum frequency
##       as specified by the user
##       Here min freq<- item.min.frq
prune_item_freq_table <- function(item.freq.table, item.min.freq){
pruned.item.table<- item.freq.table[item.freq.table$Freq >= item.min.freq,]
return(pruned.item.table)
}

#Step 4: Function to get possible itemset combinations where each itemset has n number of items where n is specifiedby the user.Here n<- num.items
get_associated_itemset_combination<- function(prund.item.table, num.items){
itemset.associations<-c()
itemset.association.matrix <- combn(pruned.item.table$., num.items)
for(index in seq(ncol(itemset.association.matrix))){
itemset.association <- c(itemset.associations, paste(itemset.association.matrix[,index], collapse=","))}
itemset.association<- unique(itemset.associations)
return(itemset.associations)
}
}


#Step5： Function to build an itemset association matrix where we see a contingency table 
showing itemset association occurrence in each transaction of the dataset
build_itemset_association_matix<- function(dataset,
                                           itemset.association.labels,
                                           itemset.combination.nums){
 itemset.transaction.labels<- sapply(dataset, paste, collapse=", ")
 itemset.associations<-lapply(itemset.association.labels, 
                              function(itemset){
                              unlist(strsplit(itemset,", ",
                                              fixed= TRUE)
                                              )
                                              }
                                              )}
                                              
#Building the itemset association matrix
 association.vector<- c()
 for (itemset. association in itemset.associations){
 association.vector<-c(association.vector,
                        unlist(lapply(dataset,
                        function(dataitem, 
                        num.items=itemset.combination.nums){
                        m<-match(dataitem,itemset.association)
                        m<-length(m[!is.na(m)])
                        if(m==num.items){
                        1
                        }else{
                        NA
                        }})))}
itemset.association.matrix<- matrix(association.vector, nrow=length(dataset))
itemset.association.labels<-sapply(itemset.association.labels,
                             function(item){
                             paste0（'{'，paste(item,
                             collapse=','),'}')}
                             }
                             )
                             
itemset.transaction.labels<- sapply(data,
                             function(itemset){
                             paste0('{', paste(itemset, 
                             collapse=','),'}
                             }
                             )
colnames(itemset.association.matrix)<-itemset.association.labels
rownames(itemset.association.matrix)<-itemset.transaction.labels
return(itemset.association.matrix)
}

#Step6: function to generate total occurrences of each itemset in the transactional dataset based on data from teh association matrix
get_frequent_itemset_details<- function(itemset.association.matrix){
frequent.itemsets.table<-apply(itemset.association.matrix, 2 ,sum, na.rm=TRUE)
return(frequent.itemsets.table)}

#Function containing entire workflow to generate frequent itemset
#itemset.combination.nums(每个项集中应该包含的项目个数)
#item.min.freq(每个项目的最小购买数阈值)
#minsup(生成的频繁项集的最小支持度)


